import datetime

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from DB.DBhandlers import *

router = Router()


class DateCallbackFactory(CallbackData, prefix="date="):
    date: str


class PsychologistCallbackFactory(CallbackData, prefix="psychologist="):
    id_psychologist: int


class SlotCallbackFactory(CallbackData, prefix="slot="):
    id_slot: int
    date: str


@router.callback_query(F.data == "tochoice")
async def handle_choice(callback: CallbackQuery):
    text = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –Ω–∞—à–µ–π –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ –ª—é–±–æ–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∑–∞–ø–∏—Å–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="bydays"),
            InlineKeyboardButton(text="–ü–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data="bysurname")
        ]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "bysurname")
async def handle_surname(callback: CallbackQuery):
    text = "–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
    builder = InlineKeyboardBuilder()

    surnames = await get_psychologist_surnames()

    for id, surname in surnames.items():
        builder.button(text=surname, callback_data=PsychologistCallbackFactory(id_psychologist=id))

    builder.button(text="–ù–∞–∑–∞–¥", callback_data="tochoice")
    builder.adjust(2)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(PsychologistCallbackFactory.filter())
async def handle_time(callback: CallbackQuery, callback_data: PsychologistCallbackFactory):
    builder = InlineKeyboardBuilder()

    times = await get_free_slots_for_psychologist(callback_data.id_psychologist)

    if len(times) == 0:
        await callback.message.edit_text(
            "–ü–æ—Ö–æ–∂–µ —É —ç—Ç–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞–Ω—è—Ç—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è "
            "–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏")

    for id, date, time, weekday in times:
        builder.button(
            text=f"{weekday} {time.strftime('%H:%M')} ({datetime.date.fromisoformat(date).strftime('%d.%m')})",
            callback_data=SlotCallbackFactory(id_slot=id, date=date))

    builder.button(text="–ù–∞–∑–∞–¥", callback_data="bysurname")
    builder.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "bydays")
async def handle_days(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()

    dates = await get_slot_dates()

    for name, date in dates:
        builder.button(text=f"{name} ({date.strftime('%d.%m')})", callback_data=DateCallbackFactory(date=str(date)))

    builder.button(text="–ù–∞–∑–∞–¥", callback_data="tochoice")
    builder.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(DateCallbackFactory.filter())
async def handle_date(callback: CallbackQuery, callback_data: DateCallbackFactory):
    builder = InlineKeyboardBuilder()

    options = await get_free_slots_for_date(datetime.date.fromisoformat(callback_data.date))

    for id, time, surname in options:
        builder.button(text=f"{surname} ({time.strftime('%H:%M')})",
                       callback_data=SlotCallbackFactory(id_slot=id, date=callback_data.date))

    builder.button(text="–ù–∞–∑–∞–¥", callback_data="bydays")
    builder.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(SlotCallbackFactory.filter())
async def handle_slot(callback: CallbackQuery, callback_data: SlotCallbackFactory):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í –Ω–∞—á–∞–ª–æ", callback_data="tochoice"),
        ]
    ])
    id_client = await get_client_id_by_telegram(id_telegram=callback.from_user.id)
    client = await get_client(id_client)
    assignments = await get_user_assignments(id_client, days=13)
    if assignments:
        await callback.message.edit_text(
            f"–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω:\nüìÖ {assignments[0]['date'].strftime('%d.%m')}\n‚åõÔ∏è {assignments[0]['time'].strftime('%H:%M')}\nüôã‚Äç‚ôÇÔ∏è {assignments[0]['psychologist']}\nüìû {assignments[0]['phone']}\n\n"
            f"–ù–∞–ø–∏—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É –Ω–∞ WhatsApp –∑–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 17:00 (–ø–æ—Å—Ç–∞–≤—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ).\n\n"
            f"<code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è {client.surname} {client.name} –∑–∞–ø–∏—Å–∞–Ω(–∞) –∫ –í–∞–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é {assignments[0]['date'].strftime('%d.%m')} –Ω–∞ {assignments[0]['time'].strftime('%H:%M')}. –í –∫–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç –º–Ω–µ –ø–æ–¥–æ–π—Ç–∏?</code>\n"
            f"(–ù–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n"
            f"–î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞, –ø—Å–∏—Ö–æ–ª–æ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
            f"–±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ç–≤–æ–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            f"–ë–µ–∑ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è.\n\n"
            f"–¢—ã —Å–º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞",
            reply_markup=keyboard)
        await callback.answer()
        return

    result = await assign_user_to_slot(id_client, callback_data.id_slot, callback_data.date)

    if result is not None:
        await callback.message.edit_text(f"–¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –∫ \n"
                                         f"üôã‚Äç‚ôÇÔ∏è {result['psychologist']}\nüìÖ {datetime.date.fromisoformat(result['date']).strftime('%d.%m.%y')}\n‚åõÔ∏è {result['time'].strftime('%H:%M')}\n\n"
                                         f"–ù–∞–ø–∏—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É –Ω–∞ WhatsApp –∑–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 17:00 (–ø–æ—Å—Ç–∞–≤—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ).\n\n"
                                         f"<code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è {client.surname} {client.name} –∑–∞–ø–∏—Å–∞–Ω(–∞) –∫ –í–∞–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é {datetime.date.fromisoformat(result['date']).strftime('%d.%m.%y')} –Ω–∞ {result['time'].strftime('%H:%M')}. –í –∫–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç –º–Ω–µ –ø–æ–¥–æ–π—Ç–∏?</code>\n"
                                         f"(–ù–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n"
                                         f"–î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞, –ø—Å–∏—Ö–æ–ª–æ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ç–≤–æ–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. "
                                         f"–ë–µ–∑ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è.",
                                         reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ö–∞–∂–µ—Ç—Å—è —Å–ª–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–Ω—è—Ç –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º", reply_markup=keyboard)
    await callback.answer()
