from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from DB.DBhandlers import *
from logger_config import logger

from aiogram.fsm.state import StatesGroup, State

router = Router()


class Reg(StatesGroup):
    enter_fio = State()
    enter_age = State()
    enter_institute = State()


class InstituteCallbackFactory(CallbackData, prefix="institute="):
    id: int


@router.callback_query(F.data == "register")
async def handle_choice(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"{callback.from_user.id} –ó–∞–ø—É—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–∞–º–∏–ª–∏—è –ò–º—è)"
    await callback.message.edit_text(text)
    await state.update_data(message=callback.message.message_id)
    await state.set_state(Reg.enter_fio)
    await callback.answer()


@router.message(StateFilter(Reg.enter_fio))
async def fio_handler(message: Message, state: FSMContext):
    logger.debug(f"{message.from_user.id} –í—ã–∑–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û")
    data = await state.get_data()
    last_message = data.get("message")

    if len(message.text.strip()) < 3:
        logger.debug(f"{message.from_user.id} –í–≤–µ–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –§–ò–û: {message.text}")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                            text="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ –¥–ª—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏üò•\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–§–∞–º–∏–ª–∏—è –ò–º—è)")
        await message.delete()
        return
    surname, name = message.text.replace("(", "").replace(")", "").strip().split(" ")

    if len(surname) < 3:
        logger.debug(f"{message.from_user.id} –í–≤–µ–¥–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—è: {surname} –≤ {message.text}")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                            text="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—èüò•\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–§–∞–º–∏–ª–∏—è –ò–º—è)")
        await message.delete()
        return
    if len(name) < 3:
        logger.debug(f"{message.from_user.id} –í–≤–µ–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è: {name} –≤ {message.text}")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                            text="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—èüò•\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–§–∞–º–∏–ª–∏—è –ò–º—è)")
        await message.delete()
        return

    await state.update_data(surname=surname, name=name)
    await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                        text=f"–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏–≤–µ—Ç {name}!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(Reg.enter_age)
    await message.delete()


@router.message(StateFilter(Reg.enter_age))
async def age_handler(message: Message, state: FSMContext):
    logger.debug(f"{message.from_user.id} –í—ã–∑–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞")
    data = await state.get_data()
    last_message = data.get("message")

    if not message.text.strip().isdigit():
        logger.debug(f"{message.from_user.id} –í–≤–µ–¥–µ–Ω—ã –±—É–∫–≤—ã –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ: {message.text}")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                            text="–ù–µ –¥—É–º–∞—é, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ãüòÄ\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ —Ä–∞–∑")
        await message.delete()
        return

    age = int(message.text)
    if not 14 < age < 99:
        logger.debug(f"{message.from_user.id} –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                            text="–ö–∞–∂–µ—Ç—Å—è —Ç—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ —Ä–∞–∑")
        await message.delete()
        return

    builder = InlineKeyboardBuilder()

    institutes = await get_institutes()

    for id, name in institutes.items():
        builder.button(text=name, callback_data=InstituteCallbackFactory(id=id))

    builder.adjust(2)

    await state.update_data(age=age)
    await message.bot.edit_message_text(chat_id=message.chat.id, message_id=last_message,
                                        text=f"–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è",
                                        reply_markup=builder.as_markup())
    await state.set_state(Reg.enter_institute)
    await message.delete()


@router.callback_query(InstituteCallbackFactory.filter())
async def institute_handler(callback: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    logger.debug(f"{callback.from_user.id} –í—ã–∑–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞")
    data = await state.get_data()
    last_message = data.get("message")

    surname = data.get('surname')
    name = data.get('name')
    age = data.get('age')
    institute = callback_data.id
    result = await register_client(callback.from_user.id, surname, name, age, institute)

    if not result:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ {callback.from_user.id} {surname} {name} {age} {institute}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="register")
            ]
        ])

        await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=last_message,
                                             text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò•\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                             reply_markup=keyboard)
        await state.set_state(None)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram id {callback.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="tochoice"),
        ]
    ])

    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=last_message,
                                         text=f"–ú–æ–ª–æ–¥–µ—Ü! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º",
                                         reply_markup=keyboard)
    await state.set_state(None)
